// automatically generated by the FlatBuffers compiler, do not modify

package com.example.yechy.tvass.flatbuffers;

import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class SocketMessage extends Table {
  public static SocketMessage getRootAsSocketMessage(ByteBuffer _bb) { return getRootAsSocketMessage(_bb, new SocketMessage()); }
  public static SocketMessage getRootAsSocketMessage(ByteBuffer _bb, SocketMessage obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public SocketMessage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String head() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer headAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public byte msgType() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public int ip() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public short keyCode() { int o = __offset(10); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public byte keyAction() { int o = __offset(12); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createSocketMessage(FlatBufferBuilder builder,
      int headOffset,
      byte msgType,
      int ip,
      short keyCode,
      byte keyAction) {
    builder.startObject(5);
    SocketMessage.addIp(builder, ip);
    SocketMessage.addHead(builder, headOffset);
    SocketMessage.addKeyCode(builder, keyCode);
    SocketMessage.addKeyAction(builder, keyAction);
    SocketMessage.addMsgType(builder, msgType);
    return SocketMessage.endSocketMessage(builder);
  }

  public static void startSocketMessage(FlatBufferBuilder builder) { builder.startObject(5); }
  public static void addHead(FlatBufferBuilder builder, int headOffset) { builder.addOffset(0, headOffset, 0); }
  public static void addMsgType(FlatBufferBuilder builder, byte msgType) { builder.addByte(1, msgType, 0); }
  public static void addIp(FlatBufferBuilder builder, int ip) { builder.addInt(2, ip, 0); }
  public static void addKeyCode(FlatBufferBuilder builder, short keyCode) { builder.addShort(3, keyCode, 0); }
  public static void addKeyAction(FlatBufferBuilder builder, byte keyAction) { builder.addByte(4, keyAction, 0); }
  public static int endSocketMessage(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishSocketMessageBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
}

